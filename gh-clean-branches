#!/bin/zsh

# safely delete local branches that have no remotes and no hanging changes
# will not delete branches with not commited changes
# run inside a git repo folder

DRY_RUN=false
FORCE=false
if [ $# -gt 0 ]; then
  case "$1" in
    --dry-run )
      DRY_RUN=true
      ;;
    --force)
      FORCE=true
      ;;
    * )
      printf "%s\n" "Usage: gh clean-branches [--dry-run] [--force]"
      exit 1
      ;;
  esac
fi

red=$(printf '\e[1;31m')
green=$(printf '\e[1;32m')
yellow=$(printf '\e[1;33m')
blue=$(printf '\e[1;34m')
end=$(printf '\e[0m')

printf "%s\n" "${green}Sync branches${end}"
git fetch -p >/dev/null 2>&1 # hide response

upstream_name=$(git remote show)
default_branch=$(git remote show ${upstream_name} | awk '/HEAD branch/ {print $NF}')

printf "%s\n" "${green}Checking out ${default_branch}${end}"
git checkout $default_branch

printf "%s\n" "${green}Pulling ${default_branch}${end}"
git pull
if [[ $? -eq 1 ]]
  then
    printf "%s\n" "${red}Failed pull, Check for uncomited changes.${end}"
    exit 1
fi

local_branches_str=$(git branch)
remote_branches_str=$(git branch -r)
remote_branches_str=${remote_branches_str//${upstream_name}\// } # trim the "origin/" from branch names

printf "%s\n%s\n" "${blue}Local branches:${end}" "${local_branches_str}"
printf "%s\n%s\n" "${blue}Remote branches:${end}" "${remote_branches_str}"

missing_upstream_branches_str=`node -e "
const args = process.argv.slice(1);
const local_branches_str = args[0]
const remote_branches_str = args[1]

local_branches = local_branches_str.trim().split('\n').filter(b => !b.includes(' ${default_branch}')).map(b => b.trim())
remote_branches = remote_branches_str.trim().split('\n').filter(b => !b.includes(' ${default_branch}')).map(b => b.trim())
missing_upstream_branches = local_branches.filter(b => !remote_branches.includes(b))

console.log(missing_upstream_branches.join(','))
" $local_branches_str $remote_branches_str`

missing_upstream_branches=("${(@s/,/)missing_upstream_branches_str}") # @ modifier

branches_count=${#missing_upstream_branches[@]}

# No results returns an array with a single empty element
if [[ ${branches_count} -eq 1 ]] && [[ -z "${missing_upstream_branches[1]}" ]]; then
    printf "%s\n" "${green}No local branches with missing upstream found${end}"
else
    printf "%s\n" "${blue}Local branches with missing upstream:${end}"
    for branch in "${missing_upstream_branches[@]}"; do
        printf "%s\n" "   ${branch}"
    done
    
    if [[ ${DRY_RUN} == false ]]; then
      for branch in "${missing_upstream_branches[@]}"; do
          printf "%s\n" "${green}Deleting branch:${end}     ${branch}"
          [[ $FORCE = true ]] && flag="-D" || flag="-d"
          git branch ${flag} "${branch}"
          if [[ $? -eq 1 ]]; then
            printf "%s\n" "‚ùå  ${red}Could not delete${end} ${branch}"
            if [[ ${FORCE} == false ]]; then
              printf "%s\n" "${yellow}Try manually:${end} git branch -D ${branch}"
            fi
          fi
      done
    else
        printf "%s\n" "${green}Dry run: not deleting branches${end}"
    fi
fi

printf "\n%s\n" "${green}Done${end}"
